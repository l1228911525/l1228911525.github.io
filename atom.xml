<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://l1228911525.github.io</id>
    <title>Gridea</title>
    <updated>2021-03-28T06:44:37.749Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://l1228911525.github.io"/>
    <link rel="self" href="https://l1228911525.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://l1228911525.github.io/images/avatar.png</logo>
    <icon>https://l1228911525.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[org.w3c.dom解析XML文档]]></title>
        <id>https://l1228911525.github.io/post/orgw3cdom-jie-xi-xml-wen-dang/</id>
        <link href="https://l1228911525.github.io/post/orgw3cdom-jie-xi-xml-wen-dang/">
        </link>
        <updated>2021-03-28T06:03:16.000Z</updated>
        <content type="html"><![CDATA[<p>转载：https://blog.csdn.net/gxftry1st/article/details/59483792<br>
位于org.w3c.dom操作XML会比较简单，就是将XML看做是一颗树，DOM就是对这颗树的一个数据结构的描述，但对大型XML文件效果可能会不理想</p>
<h2 id="首先来了解点java-dom-的-api">首先来了解点Java DOM 的 API:</h2>
<p><strong>1.解析器工厂类：DocumentBuilderFactory</strong><br>
创建的方法：DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</p>
<p><strong>2.解析器：DocumentBuilder</strong><br>
创建方法：通过解析器工厂类来获得 DocumentBuilder db = dbf.newDocumentBuilder();</p>
<p><strong>3.文档树模型Document</strong><br>
创建方法：a.通过xml文档 Document doc = db.parse(&quot;bean.xml&quot;);  b.将需要解析的xml文档转化为输入流 InputStream is = new FileInputStream(&quot;bean.xml&quot;);<br>
Document doc = db.parse(is);<br>
Document对象代表了一个XML文档的模型树，所有的其他Node都以一定的顺序包含在Document对象之内，排列成一个树状结构，以后对XML文档的所有操作都与解析器无关，</p>
<p>直接在这个Document对象上进行操作即可；</p>
<p>包含的方法：<br>
<strong>4.节点列表类NodeList</strong><br>
NodeList代表了一个包含一个或者多个Node的列表，根据操作可以将其简化的看做为数组</p>
<p><strong>5.节点类Node</strong><br>
Node对象是DOM中最基本的对象，代表了文档树中的抽象节点。但在实际使用中很少会直接使用Node对象，而是使用Node对象的子对象Element,Attr,Text等</p>
<p><strong>6.元素类Element</strong><br>
是Node类最主要的子对象，在元素中可以包含属性，因而Element中有存取其属性的方法</p>
<p><strong>7.属性类Attr</strong><br>
代表某个元素的属性，虽然Attr继承自Node接口，但因为Attr是包含在Element中的，但并不能将其看做是Element的子对象，因为Attr并不是DOM树的一部分</p>
<p>基本的知识就到此结束，更加具体的大家可以参阅JDK API文档</p>
<h2 id="code">CODE</h2>
<p>XML文件</p>
<pre><code class="language-xml">&lt;?xml version = &quot;1.0&quot; encoding = &quot;utf-8&quot;?&gt;

&lt;School&gt;
  &lt;Student&gt;
    &lt;Name&gt;沈浪&lt;/Name&gt;
    &lt;Name&gt;LQYYY&lt;/Name&gt;
    &lt;Num&gt;1006010022&lt;/Num&gt;
    &lt;Classes&gt;信管2&lt;/Classes&gt;
    &lt;Address&gt;浙江杭州3&lt;/Address&gt;
    &lt;Tel&gt;123456&lt;/Tel&gt;
  &lt;/Student&gt;
  &lt;Student&gt;
    &lt;Name&gt;沈1&lt;/Name&gt;
    &lt;Num&gt;1006010033&lt;/Num&gt;
    &lt;Classes&gt;信管1&lt;/Classes&gt;
    &lt;Address&gt;浙江杭州4&lt;/Address&gt;
    &lt;Tel&gt;234567&lt;/Tel&gt;
  &lt;/Student&gt;
  &lt;Student&gt;
    &lt;Name&gt;沈2&lt;/Name&gt;
    &lt;Num&gt;1006010044&lt;/Num&gt;
    &lt;Classes&gt;生工2&lt;/Classes&gt;
    &lt;Address&gt;浙江杭州1&lt;/Address&gt;
    &lt;Tel&gt;345678&lt;/Tel&gt;
  &lt;/Student&gt;
  &lt;Student&gt;
    &lt;Name&gt;沈3&lt;/Name&gt;
    &lt;Num&gt;1006010055&lt;/Num&gt;
    &lt;Classes&gt;电子2&lt;/Classes&gt;
    &lt;Address&gt;浙江杭州2&lt;/Address&gt;
    &lt;Tel&gt;456789&lt;/Tel&gt;
  &lt;/Student&gt;
&lt;/School&gt;
</code></pre>
<pre><code class="language-java">import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.FileOutputStream;

public class DomDemo {

  /**
   * 遍历xml文档
   * */
  public static void queryXml(){
    try{
      //得到DOM解析器的工厂实例
      DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
      //从DOM工厂中获得DOM解析器
      DocumentBuilder dbBuilder = dbFactory.newDocumentBuilder();
      //把要解析的xml文档读入DOM解析器
      Document doc = dbBuilder.parse(&quot;src/main/java/com/liao/dom/testDom.xml&quot;);
      System.out.println(&quot;处理该文档的DomImplementation对象  = &quot;+ doc.getImplementation());
      //得到文档名称为Student的元素的节点列表
      NodeList nList = doc.getElementsByTagName(&quot;School&quot;);
      Element item = (Element)nList.item(0);
      nList = item.getElementsByTagName(&quot;Student&quot;);
      //遍历该集合，显示结合中的元素及其子元素的名字
      for(int i = 0; i&lt; nList.getLength() ; i ++){
        Element node = (Element)nList.item(i);
        System.out.println(&quot;Name: &quot;+ node.getElementsByTagName(&quot;Name&quot;).item(0).getFirstChild().getNodeValue());
        System.out.println(&quot;Num: &quot;+ node.getElementsByTagName(&quot;Num&quot;).item(0).getFirstChild().getNodeValue());
        System.out.println(&quot;Classes: &quot;+ node.getElementsByTagName(&quot;Classes&quot;).item(0).getFirstChild().getNodeValue());
        System.out.println(&quot;Address: &quot;+ node.getElementsByTagName(&quot;Address&quot;).item(0).getFirstChild().getNodeValue());
        System.out.println(&quot;Tel: &quot;+ node.getElementsByTagName(&quot;Tel&quot;).item(0).getFirstChild().getNodeValue());
      }

    }catch (Exception e) {
      // TODO: handle exception
      e.printStackTrace();
    }
  }
  public static void main(String[] args){
    //读取
    DomDemo.queryXml();
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式-软件设计七大原则]]></title>
        <id>https://l1228911525.github.io/post/she-ji-mo-shi-ruan-jian-she-ji-qi-da-yuan-ze/</id>
        <link href="https://l1228911525.github.io/post/she-ji-mo-shi-ruan-jian-she-ji-qi-da-yuan-ze/">
        </link>
        <updated>2021-02-21T07:25:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="七大原则">七大原则</h1>
<p>1.开闭原则<br>
2.依赖倒置原则<br>
3.单一职责原则<br>
4.接口隔离原则<br>
5.迪米特法则（最少知道原则）<br>
6.里氏替换原则<br>
7.合成/复用原则</p>
<h1 id="开闭原则">开闭原则</h1>
<p>定义：一个软件实体如类、模块和函数应该对扩展，对修改关闭。<br>
用抽象构建框架，用实现扩展细节<br>
优点：提高软件系统的可复用性以及可维护性</p>
<h2 id="code">code</h2>
<p>需求：实现一个课程信息类</p>
<blockquote>
<p>第一个版本的UML<br>
<img src="https://l1228911525.github.io/post-images/1613893672117.PNG" alt="" loading="lazy"><br>
第一个版本的代码</p>
</blockquote>
<pre><code class="language-java">// ICourse
public interface ICourse {
    Integer getId();
    String getName();
    Double getPrice();
    Double getDiscountPrice();
}
</code></pre>
<pre><code class="language-java">public class JavaCourse implements ICourse {
    private Integer id;
    private String name;
    private Double price;

    public JavaCourse(Integer id, String name, Double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }
    @Override
    public Integer getId() {
        return this.id;
    }
    @Override
    public String getName() {
        return this.name;
    }
    @Override
    public Double getPrice() {
        return this.price;
    }
}
</code></pre>
<pre><code class="language-java">// test
public class Test{
    public static void main(String[] args) {
        ICourse javaCourse = new JavaCourse(96, &quot;Java从零到企业级电商开发&quot;, 34d);
        System.out.println(&quot;课程ID:&quot;+javaCourse.getId+&quot;课程名称:&quot;+javaCourse.getName()+&quot;价格:&quot;+javaCourse.getPrice());
    }
}
</code></pre>
<p>现在出现了新的需求：java课程需要打折。<br>
针对这个需求有两个解决方案：<br>
1.直接在ICourse和JavaCourse进行修改</p>
<pre><code>// ICourse内添加如下代码
Double getDiscountPrice();
</code></pre>
<pre><code class="language-java">// JavaCourse
    @Override
    public Double getDiscountPrice() {
        return this.price * 0.8;
    }
</code></pre>
<p>结论：这种方式违背了开闭原则，即对修改关闭。<br>
2.新增一个新的类JavaDiscountCourse继承JavaCourse，在JavaDiscountCourse内实现打折功能。</p>
<blockquote>
<p>第二个版本的代码</p>
</blockquote>
<pre><code class="language-java">public class JavaDiscountCourse extends JavaCourse {
    public JavaDiscountCourse(Integer id, String name, Double price) {
        super(id, name, price);
    }

    @Override
    public Double getPrice() {
        return super.getPrice() * 0.8;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[注解-基础知识]]></title>
        <id>https://l1228911525.github.io/post/zhu-jie-ji-chu-zhi-shi/</id>
        <link href="https://l1228911525.github.io/post/zhu-jie-ji-chu-zhi-shi/">
        </link>
        <updated>2021-02-17T21:22:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="反射的获取源">反射的获取源</h1>
<p>1.用XML来保存类相关的信息以供反射调用<br>
<img src="https://l1228911525.github.io/post-images/1613597050478.PNG" alt="" loading="lazy"><br>
2.用注解保存类相关的信息以供反射调用<br>
<img src="https://l1228911525.github.io/post-images/1613597104751.PNG" alt="" loading="lazy"></p>
<h1 id="注解基础知识">注解基础知识</h1>
<h2 id="描述">描述</h2>
<p>注解提供一种为程序元素设置元数据的方法<br>
元数据是添加到程序元素如方法、字段、类和包上的额外信息<br>
注解是一种分散式的元数据设置方式，XML是集中式的设置方式<br>
注解不能直接干扰程序代码的运行</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[反射-基础知识]]></title>
        <id>https://l1228911525.github.io/post/fan-she-ji-chu-zhi-shi/</id>
        <link href="https://l1228911525.github.io/post/fan-she-ji-chu-zhi-shi/">
        </link>
        <updated>2021-02-17T17:35:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="基本概念">基本概念</h1>
<p>描述：反射允许程序在<strong>运行时</strong>进行自我检测并对内部的成员进行操作。反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力，并能根据自身行为的状态和结果，调整或修改应用描述行为的状态和相关的语义。</p>
<h1 id="反射机制的作用">反射机制的作用</h1>
<p>1.在运行时判断任意一个对象所属的类<br>
2.在运行时获取类的对象<br>
3.在运行时访问java对象的熟悉、方法、构造方法等</p>
<h1 id="javalangreflect类库里面主要的类">java.lang.reflect类库里面主要的类</h1>
<p>Field：表示类中的成员变量<br>
Method：表示类中的方法<br>
Constructor：表示类的构造方法<br>
Array：该类提供了动态创建数组和访问数组元素的静态方法</p>
<h1 id="反射依赖的class">反射依赖的Class</h1>
<p>描述：class用来表示运行时类型信息的对应类<br>
特点：<br>
1.每个类都有唯一一个与之相对应的Class对象<br>
2.Class类为类类型，而Class对象为类类型对象</p>
<h1 id="class类的特点">Class类的特点</h1>
<pre><code>1.Class类也是类的一种，class则是关键字
2.Class类只有一个私有的构造函数，只有JVM能够创建Class类的实例
3.JVM中只有唯一一个和类相对应的Class对象来描述其类型信息
</code></pre>
<h1 id="获取class对象的三种方式">获取Class对象的三种方式</h1>
<pre><code>1.Object  --&gt;  getClass()
2.任何数据类型（包括基本数据类型）都有一个&quot;静态&quot;的class属性
3.通过Class类的静态方法：forName(String className)(常用)
</code></pre>
<p>实例代码：</p>
<pre><code class="language-java">public class ReflectTarget {
    public static void main(String[] args) throws ClassNotFoundException {
        // 第一种方式获取class对象
        ReflectTarget reflectTarget = new ReflectTarget();

        Class reflectTargetClass1 = reflectTarget.getClass();

        Class reflectTargetClass2 = ReflectTarget.class;

        Class reflectTargetClass3 = Class.forName(&quot;com.inooc.reflect.ReflectTarget&quot;);
        
        System.out.println(reflectTargetClass1.getName());
        System.out.println(reflectTargetClass2.getName());
        System.out.println(reflectTargetClass1 == reflectTargetClass2);
        System.out.println(reflectTargetClass1 == reflectTargetClass3);
    }
}
</code></pre>
<h1 id="反射之获取并操作构造函数">反射之获取并操作构造函数</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式-工厂模式]]></title>
        <id>https://l1228911525.github.io/post/she-ji-mo-shi-gong-han-mo-shi/</id>
        <link href="https://l1228911525.github.io/post/she-ji-mo-shi-gong-han-mo-shi/">
        </link>
        <updated>2021-02-15T14:42:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="简单工厂模式">简单工厂模式</h1>
<p>概述：简单工厂模式就是定义一个工厂类，根据传入的参数的值不同返回不同的实例。<br>
优缺点：<br>
实现相对比较简单，但是如果需要添加分类，则需要修改MouseFactory类的源代码，违背了开闭原则<br>
示例：<br>
示例UML：<br>
<img src="https://l1228911525.github.io/post-images/1613482179667.PNG" alt="" loading="lazy"><br>
示例代码：</p>
<pre><code class="language-java">// Mouse及其子类DellMouse、HpMouse代码
// Mouse
public interface Mouse {
    void sayHi();
}
// DellMouse
public class DellMouse implements Mouse{
    public void sayHi() {
        System.out.println(&quot;我是戴尔鼠标&quot;);
    }
}
// HpMouse
public class HpMouse implements Mouse {
    public void sayHi() {
        System.out.println(&quot;我是惠普鼠标&quot;);
    }
}
</code></pre>
<pre><code class="language-java">// Mouse工厂类
public class MouseFactory {
    public static Mouse createMouse(int type) {
        switch(type) {
            case 0:
                return new DellMouse();
            case 1: 
                return new HpMouse();
        }
        // 默认是戴尔鼠标
        return new DellMouse();
    }
}
</code></pre>
<pre><code class="language-java">// 测试类
public class Test() {
    public static void main(String[] args) {
        // 传入1 则生产戴尔鼠标
        Mouse dellMouse = MouseFactory.createMouse(1);
        // 传入2 则生产惠普鼠标
        Mouse hpMouse = MouseFacotry.creaateMouse(2);
    }
}
</code></pre>
<h1 id="工厂方法模式">工厂方法模式</h1>
<p>概述：工厂类也实现继承关系，不同的对象类用不同的工厂来生产。这样就解决了简单工厂模式添加分类时违背开闭原则的问题。<br>
示例：<br>
示例UML：<br>
<img src="https://l1228911525.github.io/post-images/1613553528419.PNG" alt="" loading="lazy"><br>
示例代码：</p>
<pre><code>// Mouse及其子类的代码和上面的一致
//  MouseFactory及其子类的代码
public interface MouseFactory {
    Mouse createMouse();
}

public class DellMouseFactory implements MouseFactory {
    public Mouse createMouse() {
        return new DellMouse();
    }
}

public class HpMouseFactory implements MouseFactory {
    public Mouse createMouse() {
        return new HpMouse();
    }
}
</code></pre>
<pre><code>// 测试代码
public class FactoryMethodDemo {
    public static void main(String[] args) {
        // 惠普鼠标就用惠普工厂生产
        MouseFactory hpMf = new HpMouseFactory();
        Mouse hpMouse = hpMf.createMouse();
        // 戴尔鼠标就用戴尔工厂生产
        MouseFactory dlMf = new DellMouseFactory();
        Mouse dlMouse = dlMf.createMouse();
        hpMouse.sayHi();
        dlMouse.sayHi();

    }
}
</code></pre>
<h1 id="抽象工厂模式">抽象工厂模式</h1>
<p>描述：提供一个创建一系列相关或者相互依赖对象的接口。<br>
示例：<br>
示例UML：<br>
<img src="https://l1228911525.github.io/post-images/1613582618139.PNG" alt="" loading="lazy"><br>
示例代码：</p>
<pre><code class="language-java">// Mouse
public interface Mouse {
    void sayHi();
}
// HpMouse
public class HpMouse implements Mouse {
    public void sayHi() {
        System.out.println(&quot;我是惠普鼠标&quot;);
    }
}
// DellMouse
public class DellMouse implements Mouse {
    public void sayHi() {
        System.out.println(&quot;我是戴尔鼠标&quot;);
    }
}

// Keyboard
public interface Keyboard {
    void sayHello();
}
// HpKeyboard
public class HpKeyboard implements Keyboard {
    @Override
    public void sayHello() {
        System.out.println(&quot;我是惠普键盘&quot;);
    }
}
// DellKeyboard
public class DellKeyboard implements Keyboard {
    @Override
    public void sayHello() {
        System.out.println(&quot;我是戴尔键盘&quot;);
    }
}
</code></pre>
<pre><code class="language-java">//
public interface ComputerFactory {
    Mouse createMouse();
    Keyboard createKeyboard();
}
public class DellComputerFactory implements ComputerFactory {
    @Override
    public Mouse createMouse() {
        return new DellMouse();
    }

    @Override
    public Keyboard createKeyboard() {
        return new DellKeyboard();
    }
}
public class HpComputerFactory implements ComputerFactory {
    @Override
    public Mouse createMouse() {
        return new HpMouse();
    }

    @Override
    public Keyboard createKeyboard() {
        return new HpKeyboard();
    }
}
</code></pre>
<pre><code class="language-java">// 测试代码
public class AbstractFactoryDemo {
    public static void main(String[] args) {
        ComputerFactory cf = new HpComputerFactory();
        Mouse mouse = cf.createMouse();
        Keyboard keyboard = cf.createKeyboard();

        mouse.sayHi();
        keyboard.sayHello();

    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://l1228911525.github.io/post/hello-gridea/</id>
        <link href="https://l1228911525.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>