<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://l1228911525.github.io</id>
    <title>Gridea</title>
    <updated>2021-02-17T17:31:52.963Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://l1228911525.github.io"/>
    <link rel="self" href="https://l1228911525.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://l1228911525.github.io/images/avatar.png</logo>
    <icon>https://l1228911525.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[设计模式-工厂模式]]></title>
        <id>https://l1228911525.github.io/post/she-ji-mo-shi-gong-han-mo-shi/</id>
        <link href="https://l1228911525.github.io/post/she-ji-mo-shi-gong-han-mo-shi/">
        </link>
        <updated>2021-02-15T14:42:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="简单工厂模式">简单工厂模式</h1>
<p>概述：简单工厂模式就是定义一个工厂类，根据传入的参数的值不同返回不同的实例。<br>
优缺点：<br>
实现相对比较简单，但是如果需要添加分类，则需要修改MouseFactory类的源代码，违背了开闭原则<br>
示例：<br>
示例UML：<br>
<img src="https://l1228911525.github.io/post-images/1613482179667.PNG" alt="" loading="lazy"><br>
示例代码：</p>
<pre><code class="language-java">// Mouse及其子类DellMouse、HpMouse代码
// Mouse
public interface Mouse {
    void sayHi();
}
// DellMouse
public class DellMouse implements Mouse{
    public void sayHi() {
        System.out.println(&quot;我是戴尔鼠标&quot;);
    }
}
// HpMouse
public class HpMouse implements Mouse {
    public void sayHi() {
        System.out.println(&quot;我是惠普鼠标&quot;);
    }
}
</code></pre>
<pre><code class="language-java">// Mouse工厂类
public class MouseFactory {
    public static Mouse createMouse(int type) {
        switch(type) {
            case 0:
                return new DellMouse();
            case 1: 
                return new HpMouse();
        }
        // 默认是戴尔鼠标
        return new DellMouse();
    }
}
</code></pre>
<pre><code class="language-java">// 测试类
public class Test() {
    public static void main(String[] args) {
        // 传入1 则生产戴尔鼠标
        Mouse dellMouse = MouseFactory.createMouse(1);
        // 传入2 则生产惠普鼠标
        Mouse hpMouse = MouseFacotry.creaateMouse(2);
    }
}
</code></pre>
<h1 id="工厂方法模式">工厂方法模式</h1>
<p>概述：工厂类也实现继承关系，不同的对象类用不同的工厂来生产。这样就解决了简单工厂模式添加分类时违背开闭原则的问题。<br>
示例：<br>
示例UML：<br>
<img src="https://l1228911525.github.io/post-images/1613553528419.PNG" alt="" loading="lazy"><br>
示例代码：</p>
<pre><code>// Mouse及其子类的代码和上面的一致
//  MouseFactory及其子类的代码
public interface MouseFactory {
    Mouse createMouse();
}

public class DellMouseFactory implements MouseFactory {
    public Mouse createMouse() {
        return new DellMouse();
    }
}

public class HpMouseFactory implements MouseFactory {
    public Mouse createMouse() {
        return new HpMouse();
    }
}
</code></pre>
<pre><code>// 测试代码
public class FactoryMethodDemo {
    public static void main(String[] args) {
        // 惠普鼠标就用惠普工厂生产
        MouseFactory hpMf = new HpMouseFactory();
        Mouse hpMouse = hpMf.createMouse();
        // 戴尔鼠标就用戴尔工厂生产
        MouseFactory dlMf = new DellMouseFactory();
        Mouse dlMouse = dlMf.createMouse();
        hpMouse.sayHi();
        dlMouse.sayHi();

    }
}
</code></pre>
<h1 id="抽象工厂模式">抽象工厂模式</h1>
<p>描述：提供一个创建一系列相关或者相互依赖对象的接口。<br>
示例：<br>
示例UML：<br>
<img src="https://l1228911525.github.io/post-images/1613582618139.PNG" alt="" loading="lazy"><br>
示例代码：</p>
<pre><code class="language-java">// Mouse
public interface Mouse {
    void sayHi();
}
// HpMouse
public class HpMouse implements Mouse {
    public void sayHi() {
        System.out.println(&quot;我是惠普鼠标&quot;);
    }
}
// DellMouse
public class DellMouse implements Mouse {
    public void sayHi() {
        System.out.println(&quot;我是戴尔鼠标&quot;);
    }
}

// Keyboard
public interface Keyboard {
    void sayHello();
}
// HpKeyboard
public class HpKeyboard implements Keyboard {
    @Override
    public void sayHello() {
        System.out.println(&quot;我是惠普键盘&quot;);
    }
}
// DellKeyboard
public class DellKeyboard implements Keyboard {
    @Override
    public void sayHello() {
        System.out.println(&quot;我是戴尔键盘&quot;);
    }
}
</code></pre>
<pre><code class="language-java">//
public interface ComputerFactory {
    Mouse createMouse();
    Keyboard createKeyboard();
}
public class DellComputerFactory implements ComputerFactory {
    @Override
    public Mouse createMouse() {
        return new DellMouse();
    }

    @Override
    public Keyboard createKeyboard() {
        return new DellKeyboard();
    }
}
public class HpComputerFactory implements ComputerFactory {
    @Override
    public Mouse createMouse() {
        return new HpMouse();
    }

    @Override
    public Keyboard createKeyboard() {
        return new HpKeyboard();
    }
}
</code></pre>
<pre><code class="language-java">// 测试代码
public class AbstractFactoryDemo {
    public static void main(String[] args) {
        ComputerFactory cf = new HpComputerFactory();
        Mouse mouse = cf.createMouse();
        Keyboard keyboard = cf.createKeyboard();

        mouse.sayHi();
        keyboard.sayHello();

    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://l1228911525.github.io/post/hello-gridea/</id>
        <link href="https://l1228911525.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>